#!/user/bin/env python

from os import path
from os import mkdir

from datetime import date

import configparser
import argparse

from DataRepository_research_themes.create_csv import create_csv

today = date.today()

co_filename = __file__
co_dir = path.dirname(co_filename)


if __name__ == '__main__':

    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Command-line driver for research themes management.')
    parser.add_argument('--execute', help='Boolean to force full execution (default is a "dry run"', action='store_true')
    args = parser.parse_args()

    if args.execute:
        print("Full run execution")
    else:
        print("Dry run execution")

    config = configparser.ConfigParser()
    config.read(path.join(co_dir, 'default.ini'))

    url = config.get('global', 'url')  # Get URL for Google Sheets

    # Set output filename
    outfile_dir  = config.get('global', 'outfile_dir')
    outfile_dir0 = path.join(co_dir, outfile_dir)
    if not path.exists(outfile_dir0):
        mkdir(outfile_dir0)

    if args.execute:
        outfile = path.join(outfile_dir, config.get('global', 'outfile'))
    else:
        outfile = path.join(outfile_dir, config.get('global', 'outfile_dryrun'))

    # Logfile info
    log_dir = config.get('global', 'log_dir')
    if not path.exists(log_dir):
        mkdir(log_dir)
    logfile_prefix = config.get('global', 'logfile_prefix')
    logfile = "{}.{}.log".format(logfile_prefix, today.strftime("%Y-%m-%d"))

    create_csv(url, outfile, log_dir, logfile)
